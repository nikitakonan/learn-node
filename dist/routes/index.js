"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const authController_1 = require("../controllers/authController");
const reviewController_1 = require("../controllers/reviewController");
const storeController_1 = require("../controllers/storeController");
const userController_1 = require("../controllers/userController");
const errorHandlers_1 = require("../handlers/errorHandlers");
const router = express_1.Router();
router.get('/', errorHandlers_1.catchErrors(storeController_1.getStores));
router.get('/stores', errorHandlers_1.catchErrors(storeController_1.getStores));
router.get('/stores/page/:page', errorHandlers_1.catchErrors(storeController_1.getStores));
router.get('/add', authController_1.isLoggedIn, storeController_1.addStore);
router.get('/stores/:slug', errorHandlers_1.catchErrors(storeController_1.getStore));
router.post('/add/:id', storeController_1.upload, errorHandlers_1.catchErrors(storeController_1.resize), errorHandlers_1.catchErrors(storeController_1.updateStore));
router.post('/add', storeController_1.upload, errorHandlers_1.catchErrors(storeController_1.resize), errorHandlers_1.catchErrors(storeController_1.createStore));
router.get('/stores/:id/edit', errorHandlers_1.catchErrors(storeController_1.editStore));
router.get('/top', errorHandlers_1.catchErrors(storeController_1.getTopStores));
router.get('/tags', errorHandlers_1.catchErrors(storeController_1.getStoresByTag));
router.get('/tags/:tag', errorHandlers_1.catchErrors(storeController_1.getStoresByTag));
router.get('/login', userController_1.loginForm);
router.get('/logout', authController_1.logout);
router.post('/login', authController_1.login);
router.get('/register', userController_1.registerForm);
router.get('/account', authController_1.isLoggedIn, userController_1.account);
router.post('/account', errorHandlers_1.catchErrors(userController_1.updateAccount));
router.post('/account/forgot', errorHandlers_1.catchErrors(authController_1.forgot));
router.get('/account/reset/:token', errorHandlers_1.catchErrors(authController_1.reset));
router.post('/account/reset/:token', authController_1.confirmedPasswords, errorHandlers_1.catchErrors(authController_1.update));
router.post('/register', userController_1.validateRegister, userController_1.register, authController_1.login);
router.get('/map', storeController_1.mapPage);
router.get('/hearts', authController_1.isLoggedIn, errorHandlers_1.catchErrors(storeController_1.heartedStores));
router.post('/reviews/:id', authController_1.isLoggedIn, errorHandlers_1.catchErrors(reviewController_1.addReview));
exports.default = router;
